
# Convenient numeric variables

# $. is the current input line
require 'stringio'
$stdin = StringIO.new("a\nb\nc")
$.   # => 0
gets # => "a\n"
$.   # => 1
gets # => "b\n"
$.   # => 2



# Bit manip
class Fixnum
  def inspect
    "%3d %s" % [self, ('%010b'%self)[2..-1]]
  end
end

# ~@ negates the bits
5        # =>   5 00000101
~5       # =>  -6 11111010

# -@ negates the bits and adds 1 (twos complement)
5        # =>   5 00000101
-5       # =>  -5 11111011

# +@ does nothing
+1    # =>   1 00000001
+(-1) # =>  -1 11111111

# & sets bits that are set in both numbers
13       # =>  13 00001101
14       # =>  14 00001110
13&14    # =>  12 00001100

# | sets bits that are set in either number
5        # =>   5 00000101
6        # =>   6 00000110
5|6      # =>   7 00000111

# ^ sets bits that are set in exactly one of the numbers
5        # =>   5 00000101
6        # =>   6 00000110
5^6      # =>   3 00000011

# << shifts the bits to the left (appends n zeros)
3        # =>   3 00000011
3 << 0   # =>   3 00000011
3 << 1   # =>   6 00000110
3 << 2   # =>  12 00001100
3 << 3   # =>  24 00011000

## >> shifts the bits to the right (prepends n of its leading digit)
24        # =>  24 00011000
24  >> 1  # =>  12 00001100
24  >> 2  # =>   6 00000110
-25       # => -25 11100111
-25 >> 1  # => -13 11110011
-25 >> 2  # =>  -7 11111001

# [] accesses a number's bits
5    # =>   5 00000101
5[0] # =>   1 00000001
5[1] # =>   0 00000000
5[2] # =>   1 00000001
5[3] # =>   0 00000000
5[4] # =>   0 00000000

# you can find the highest bit that is set
3.bit_length  # =>   2 00000010
4.bit_length  # =>   3 00000011
5.bit_length  # =>   3 00000011
6.bit_length  # =>   3 00000011
7.bit_length  # =>   3 00000011
8.bit_length  # =>   4 00000100

# powers of 2 are the same as setting bits
2**0 # =>   1 00000001
2**1 # =>   2 00000010
2**2 # =>   4 00000100
2**3 # =>   8 00001000
1<<3 # =>   8 00001000
1<<2 # =>   4 00000100
1<<1 # =>   2 00000010
1<<0 # =>   1 00000001

# odd numbers have their first bit set
0[0] # =>   0 00000000
1[0] # =>   1 00000001
2[0] # =>   0 00000000
3[0] # =>   1 00000001
4[0] # =>   0 00000000
5[0] # =>   1 00000001

# to subtract 1: ~-n, which negates the number (inverts bits and adds 1), and then inverts the bits again
    ~-10 # =>   9 00001001
  ~-~-10 # =>   8 00001000
~-~-~-10 # =>   7 00000111

# to add 1: -~n
-~-~-~10 # =>  13 00001101
  -~-~10 # =>  12 00001100
    -~10 # =>  11 00001011

# Spinning in place
-~~-8 # =>   8 00001000
~--~8 # =>   8 00001000
++8   # =>   8 00001000
--8   # =>   8 00001000
~~8   # =>   8 00001000
8&8   # =>   8 00001000
8^8   # =>   0 00000000


# to append a zero, n << 1
# to append a one,  ~((~n)<<1)
# which inverts the bits, appends a zero, and then inverts them again
        1                 # =>   1 00000001
        1<<1              # =>   2 00000010
    ~(~(1<<1)<<1)         # =>   5 00000101
    ~(~(1<<1)<<1)<<1      # =>  10 00001010
~(~(~(~(1<<1)<<1)<<1)<<1) # =>  21 00010101

# not a heredoc, lol
1<<-1 # =>   0 00000000
1

# to build up a number, or the bits together
37 # =>  37 00100101
            0b100000 |
            0b000100 |
            0b000001  # =>  37 00100101
(1<<5|1<<2|1<<0)      # =>  37 00100101

0b111111 ^ 0b111000 # =>   7 00000111
0b000000 ^ 0b111000 # =>  56 00111000
-1       ^ 0b111000 # => -57 11000111
~-(1<<8) ^ 0b111000 # => 199 11000111

# if the number is mostly 1s, you can build it up by starting with 1s and xoring the bits you want to flip off
247             # => 247 11110111
~-(1<<8)^(1<<3) # => 247 11110111

# some ways to make 0
0     # =>   0 00000000
~-1   # =>   0 00000000
n = 7
n^n   # =>   0 00000000
0&n   # =>   0 00000000
n[-1] # =>   0 00000000
0<<0  # =>   0 00000000
1>>1  # =>   0 00000000

# some ways to make 1
1     # =>   1 00000001
-~0   # =>   1 00000001
~-2   # =>   1 00000001
--1   # =>   1 00000001
1<<0  # =>   1 00000001
-~0   # =>   1 00000001
-1&1  # =>   1 00000001
-1^-2 # =>   1 00000001
2>>1  # =>   1 00000001
4>>2  # =>   1 00000001

# some ways to make 2
2        # =>   2 00000010
-~1      # =>   2 00000010
-~-~0    # =>   2 00000010
1<<1     # =>   2 00000010
-~0<<-~0 # =>   2 00000010
3^1      # =>   2 00000010
1^3      # =>   2 00000010
4>>1     # =>   2 00000010
2**1     # =>   2 00000010

# some ways to make 3
3        # =>   3 00000011
1|2      # =>   3 00000011
1|1<<1   # =>   3 00000011
1|-~1    # =>   3 00000011
-~1|1    # =>   3 00000011
1<<1|1   # =>   3 00000011
-~-~1    # =>   3 00000011
-~(1<<1) # =>   3 00000011
~-4      # =>   3 00000011

# some ways to make 8
8                  # =>   8 00001000

1<<3               # =>   8 00001000
1<<-~-~1           # =>   8 00001000
-~~-1<<-~-~1       # =>   8 00001000

1<<1<<2            # =>   8 00001000
1<<1<<(1<<1)       # =>   8 00001000
-~1<<1<<1          # =>   8 00001000
1<<-~1<<1          # =>   8 00001000
1<<1<<-~1          # =>   8 00001000

2 << 2             # =>   8 00001000
-~-~0<<-~-~0       # =>   8 00001000

1<<1<<1<<1         # =>   8 00001000
-~0<<-~0<<-~0<<-~0 # =>   8 00001000

-1&8               # =>   8 00001000
8&-1               # =>   8 00001000
~-1^8              # =>   8 00001000
-16^-8             # =>   8 00001000
